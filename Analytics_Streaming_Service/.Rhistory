mutate(country = fct_lump(country, 45)) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(Count) %>%
plot_ly(
x = ~ Count ,
y = ~ country,
type = "bar",
orientation = 'h'
) %>%
layout(yaxis = list(categoryorder = "array", categoryarray = ~ Count)) %>%
layout(
title = "Items distribution by Country",
yaxis = list(title = "Country"),
xaxis = list(title = "Count")
)
datatable(amazon_prime %>%
select(-cast, -description) %>%
filter(!is.na(country),
country == "Taiwan"),
caption = NULL,
options = list(dom = 't'))
datatable(hulu %>%
select(-cast, -description) %>%
filter(!is.na(country),
country == "Taiwan"),
caption = NULL,
options = list(dom = 't'))
netflix %>% select(country) %>%
filter(!is.na(country)) %>%
mutate(country = fct_lump(country, 45)) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(Count) %>%
plot_ly(
x = ~ Count ,
y = ~ country,
type = "bar",
orientation = 'h'
) %>%
layout(yaxis = list(categoryorder = "array", categoryarray = ~ Count)) %>%
layout(
title = "Items distribution by Country",
yaxis = list(title = "Country"),
xaxis = list(title = "Count")
)
datatable(netflix %>%
select(-cast, -description) %>%
filter(!is.na(country),
country == "Taiwan"),
caption = NULL,
options = list(dom = 't'))
# Dataset split to check the durations ----
movies <- netflix %>% select(country, type, duration, rating, title) %>%
filter(type == "Movie") %>%
drop_na() %>%
mutate(duration_min = parse_number(duration))
tv_show <- netflix %>% select(country, type, duration, rating, title) %>%
filter(type == "TV Show") %>%
drop_na() %>%
mutate(duration_season = parse_number(duration))
# Movies Durations
movies %>%
plot_ly(
x = ~ duration_min,
type = "histogram",
nbinsx = 40,
marker = list(
color = "drakblue",
line = list(color = "black",
width = 1)
)
) %>%
layout(
title = "電影片長時間",
yaxis = list(title = "Count",
zeroline = FALSE),
xaxis = list(title = "Duration (min)",
zeroline = FALSE)
)
# Dataset split to check the durations ----
hl_movies <- hulu %>% select(country, type, duration, rating, title) %>%
filter(type == "Movie") %>%
drop_na() %>%
mutate(duration_min = parse_number(duration))
hl_tv_show <- hulu %>% select(country, type, duration, rating, title) %>%
filter(type == "TV Show") %>%
drop_na() %>%
mutate(duration_season = parse_number(duration))
# Movies Durations
hl_movies %>%
plot_ly(
x = ~ duration_min,
type = "histogram",
nbinsx = 40,
marker = list(
color = "drakblue",
line = list(color = "black",
width = 1)
)
) %>%
layout(
title = "電影片長時間",
yaxis = list(title = "Count",
zeroline = FALSE),
xaxis = list(title = "Duration (min)",
zeroline = FALSE)
)
# Dataset split to check the durations ----
ap_movies <- amazon_prime %>% select(country, type, duration, rating, title) %>%
filter(type == "Movie") %>%
drop_na() %>%
mutate(duration_min = parse_number(duration))
ap_tv_show <- amazon_prime %>% select(country, type, duration, rating, title) %>%
filter(type == "TV Show") %>%
drop_na() %>%
mutate(duration_season = parse_number(duration))
# Movies Durations
ap_movies %>%
plot_ly(
x = ~ duration_min,
type = "histogram",
nbinsx = 40,
marker = list(
color = "drakblue",
line = list(color = "black",
width = 1)
)
) %>%
layout(
title = "電影片長時間",
yaxis = list(title = "Count",
zeroline = FALSE),
xaxis = list(title = "Duration (min)",
zeroline = FALSE)
)
datatable(disney_plus %>%
select(-cast, -description) %>%
filter(!is.na(country),
country == "Taiwan"),
caption = NULL,
options = list(dom = 't'))
# Dataset split to check the durations ----
dp_movies <- disney_plus %>% select(country, type, duration, rating, title) %>%
filter(type == "Movie") %>%
drop_na() %>%
mutate(duration_min = parse_number(duration))
dp_tv_show <- disney_plus %>% select(country, type, duration, rating, title) %>%
filter(type == "TV Show") %>%
drop_na() %>%
mutate(duration_season = parse_number(duration))
# Movies Durations
dp_movies %>%
plot_ly(
x = ~ duration_min,
type = "histogram",
nbinsx = 40,
marker = list(
color = "drakblue",
line = list(color = "black",
width = 1)
)
) %>%
layout(
title = "電影片長時間",
yaxis = list(title = "Count",
zeroline = FALSE),
xaxis = list(title = "Duration (min)",
zeroline = FALSE)
)
datatable(movies %>% select(title, duration_min) %>%
filter(duration_min >200) %>% arrange(desc(duration_min)),
caption = NULL,
options = list(dom = 't'))
datatable(hl_movies %>% select(title, duration_min) %>%
filter(duration_min >200) %>% arrange(desc(duration_min)),
caption = NULL,
options = list(dom = 't'))
datatable(ap_movies %>% select(title, duration_min) %>%
filter(duration_min >200) %>% arrange(desc(duration_min)),
caption = NULL,
options = list(dom = 't'))
datatable(dp_movies %>% select(title, duration_min) %>%
filter(duration_min >200) %>% arrange(desc(duration_min)),
caption = NULL,
options = list(dom = 't'))
# TV-Show Durations
tv_show %>% select(duration_season) %>%
count(duration_season, sort = TRUE) %>%
ggplot(aes(
x = as.factor(duration_season),
y = n,
label = n
)) +
geom_col(aes(fill = duration_season)) +
geom_text(vjust = -0.5, size = 3, col = "darkgreen") +
theme_light() +
theme(legend.position = "none") +
labs(x = "Season duration",
y = "Count",
title = "影集季數",
subtitle = "Column Plot, Season distrbution",
caption = "Kaggle: Netflix Movies and TV Shows",
fill = ""
)
datatable(tv_show %>% select(title, duration_season) %>%
filter(duration_season >15) %>% arrange(desc(duration_season)),
caption = NULL,
options = list(dom = 't'))
# TV-Show Durations
tv_show %>% select(duration_season) %>%
count(duration_season, sort = TRUE) %>%
ggplot(aes(
x = as.factor(duration_season),
y = n,
label = n
)) +
geom_col(aes(fill = duration_season)) +
geom_text(vjust = -0.5, size = 3, col = "darkgreen") +
theme_light() +
theme(legend.position = "none") +
labs(x = "Season duration",
y = "Count",
title = "影集季數",
subtitle = "Column Plot, Season distrbution",
caption = "Kaggle: Netflix Movies and TV Shows",
fill = ""
)
# TV-Show Durations
hl_tv_show %>% select(duration_season) %>%
count(duration_season, sort = TRUE) %>%
ggplot(aes(
x = as.factor(duration_season),
y = n,
label = n
)) +
geom_col(aes(fill = duration_season)) +
geom_text(vjust = -0.5, size = 3, col = "darkgreen") +
theme_light() +
theme(legend.position = "none") +
labs(x = "Season duration",
y = "Count",
title = "影集季數",
subtitle = "Column Plot, Season distrbution",
caption = "Kaggle: Hulu Movies and TV Shows",
fill = ""
)
# Movies Durations
ap_movies %>%
plot_ly(
x = ~ duration_min,
type = "histogram",
nbinsx = 40,
marker = list(
color = "drakblue",
line = list(color = "black",
width = 1)
)
) %>%
layout(
title = "電影片長時間",
yaxis = list(title = "Count",
zeroline = FALSE),
xaxis = list(title = "Duration (min)",
zeroline = FALSE)
)
datatable(ap_movies %>% select(title, duration_min) %>%
filter(duration_min >200) %>% arrange(desc(duration_min)),
caption = NULL,
options = list(dom = 't'))
# TV-Show Durations
ap_tv_show %>% select(duration_season) %>%
count(duration_season, sort = TRUE) %>%
ggplot(aes(
x = as.factor(duration_season),
y = n,
label = n
)) +
geom_col(aes(fill = duration_season)) +
geom_text(vjust = -0.5, size = 3, col = "darkgreen") +
theme_light() +
theme(legend.position = "none") +
labs(x = "Season duration",
y = "Count",
title = "影集季數",
subtitle = "Column Plot, Season distrbution",
caption = "Kaggle: Amazon_prime Movies and TV Shows",
fill = ""
)
# TV-Show Durations
dp_tv_show %>% select(duration_season) %>%
count(duration_season, sort = TRUE) %>%
ggplot(aes(
x = as.factor(duration_season),
y = n,
label = n
)) +
geom_col(aes(fill = duration_season)) +
geom_text(vjust = -0.5, size = 3, col = "darkgreen") +
theme_light() +
theme(legend.position = "none") +
labs(x = "Season duration",
y = "Count",
title = "影集季數",
subtitle = "Column Plot, Season distrbution",
caption = "Kaggle: Disney_plus Movies and TV Shows",
fill = ""
)
datatable(hl_tv_show %>% select(title, duration_season) %>%
filter(duration_season >15) %>% arrange(desc(duration_season)),
caption = NULL,
options = list(dom = 't'))
datatable(tv_show %>% select(title, duration_season) %>%
filter(duration_season >15) %>% arrange(desc(duration_season)),
caption = NULL,
options = list(dom = 't'))
# Time series ----
ggplotly(
netflix %>% select(date_added) %>%
filter(!is.na(date_added)) %>%
mutate(nf_added_year) %>%
group_by(nf_added_year) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ggplot(aes(
x = nf_added_year,
y = Count,
label = Count
)) +
geom_line(size = 1, col = "darkred", alpha = 0.5) +
geom_col(alpha = 0.6, fill = "steelblue") +
geom_text(vjust = -0.7, size = 3) +
theme_light() +
scale_y_continuous(label =  NULL) +
labs(
x = "Year Added",
y = "Count",
title = "Number of Items added per year",
subtitle = "Column and line Plot, Nunber of Items added per year",
caption = "Kaggle: Netflix Movies and TV Shows"
)
)
# Time series ----
ggplotly(
hulu %>% select(date_added) %>%
filter(!is.na(date_added)) %>%
mutate(hl_added_year) %>%
group_by(hl_added_year) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ggplot(aes(
x = hl_added_year,
y = Count,
label = Count
)) +
geom_line(size = 1, col = "darkred", alpha = 0.5) +
geom_col(alpha = 0.6, fill = "steelblue") +
geom_text(vjust = -0.7, size = 3) +
theme_light() +
scale_y_continuous(label =  NULL) +
labs(
x = "Year Added",
y = "Count",
title = "Number of Items added per year",
subtitle = "Column and line Plot, Nunber of Items added per year",
caption = "Kaggle: Hulu Movies and TV Shows"
)
)
datatable(ap_tv_show %>% select(title, duration_season) %>%
filter(duration_season >15) %>% arrange(desc(duration_season)),
caption = NULL,
options = list(dom = 't'))
# Time series ----
ggplotly(
amazon_prime %>% select(date_added) %>%
filter(!is.na(date_added)) %>%
mutate(ap_added_year) %>%
group_by(ap_added_year) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ggplot(aes(
x = ap_added_year,
y = Count,
label = Count
)) +
geom_line(size = 1, col = "darkred", alpha = 0.5) +
geom_col(alpha = 0.6, fill = "steelblue") +
geom_text(vjust = -0.7, size = 3) +
theme_light() +
scale_y_continuous(label =  NULL) +
labs(
x = "Year Added",
y = "Count",
title = "Number of Items added per year",
subtitle = "Column and line Plot, Nunber of Items added per year",
caption = "Kaggle: Amazon_prime Movies and TV Shows"
)
)
# word cloud ----
# Most frequent words in description variable For Movies (word cloud)
desc_words_m <- amazon_prime %>% select(type, show_id, description) %>%
filter(type == "Movie") %>%
unnest_tokens(word, description) %>%
anti_join(stop_words)
datatable(dp_tv_show %>% select(title, duration_season) %>%
filter(duration_season >15) %>% arrange(desc(duration_season)),
caption = NULL,
options = list(dom = 't'))
# Time series ----
ggplotly(
disney_plus %>% select(date_added) %>%
filter(!is.na(date_added)) %>%
mutate(dp_added_year) %>%
group_by(dp_added_year) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ggplot(aes(
x = dp_added_year,
y = Count,
label = Count
)) +
geom_line(size = 1, col = "darkred", alpha = 0.5) +
geom_col(alpha = 0.6, fill = "steelblue") +
geom_text(vjust = -0.7, size = 3) +
theme_light() +
scale_y_continuous(label =  NULL) +
labs(
x = "Year Added",
y = "Count",
title = "Number of Items added per year",
subtitle = "Column and line Plot, Nunber of Items added per year",
caption = "Kaggle: Disney_plus Movies and TV Shows"
)
)
# Time series ----
ggplotly(
disney_plus %>% select(date_added) %>%
filter(!is.na(date_added)) %>%
mutate(dp_added_year) %>%
group_by(dp_added_year) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ggplot(aes(
x = dp_added_year,
y = Count,
label = Count
)) +
geom_line(size = 1, col = "darkred", alpha = 0.5) +
geom_col(alpha = 0.6, fill = "steelblue") +
geom_text(vjust = -0.7, size = 3) +
theme_light() +
scale_y_continuous(label =  NULL) +
labs(
x = "Year Added",
y = "Count",
title = "Number of Items added per year",
subtitle = "Column and line Plot, Nunber of Items added per year",
caption = "Kaggle: Disney_plus Movies and TV Shows"
)
)
# word cloud ----
# Most frequent words in description variable For Movies (word cloud)
desc_words_m <- disney_plus %>% select(type, show_id, description) %>%
filter(type == "Movie") %>%
unnest_tokens(word, description) %>%
anti_join(stop_words)
count_word <- desc_words_m %>%
count(word, sort = TRUE)
wordcloud(words = count_word$word,
freq = count_word$n,
min.freq = 50,
max.words = nrow(count_word),
random.order = FALSE,
rot.per = 0.1,
colors = brewer.pal(8, "Dark2"))
# Most frequent words in description variable For TV-Shows (word cloud)
desc_words_tv <- disney_plus %>% select(type, show_id, description) %>%
filter(type == "TV Show") %>%
unnest_tokens(word, description) %>%
anti_join(stop_words)
count_word <- desc_words_tv %>%
count(word, sort = TRUE)
wordcloud(words = count_word$word,
freq = count_word$n,
min.freq = 30,
max.words = nrow(count_word),
random.order = FALSE,
rot.per = 0.1,
colors = brewer.pal(8, "Dark2"))
count_word <- desc_words_m %>%
count(word, sort = TRUE)
wordcloud(words = count_word$word,
freq = count_word$n,
min.freq = 50,
max.words = nrow(count_word),
random.order = FALSE,
rot.per = 0.1,
colors = brewer.pal(8, "Dark2"))
# Most frequent words in description variable For TV-Shows (word cloud)
desc_words_tv <- amazon_prime %>% select(type, show_id, description) %>%
filter(type == "TV Show") %>%
unnest_tokens(word, description) %>%
anti_join(stop_words)
count_word <- desc_words_tv %>%
count(word, sort = TRUE)
wordcloud(words = count_word$word,
freq = count_word$n,
min.freq = 30,
max.words = nrow(count_word),
random.order = FALSE,
rot.per = 0.1,
colors = brewer.pal(8, "Dark2"))
